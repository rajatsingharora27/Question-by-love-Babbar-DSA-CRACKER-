package linkedlist;

import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Scanner;

public class MergeKsortedLL {

	public static LinkedListNode<Integer>[] takeInput() {

		Scanner sc=new Scanner(System.in);
		System.out.println("Enter value of k");

		int k=sc.nextInt();

		LinkedListNode<Integer>[]arr=new LinkedListNode[k];





		for(int i=0;i<arr.length;i++) {


			LinkedListNode<Integer>head=null;
			LinkedListNode<Integer>tail=null;

			System.out.println("Enetr lenght of linked list "+(i+1));

			int lenLL=sc.nextInt();

			for(int j=0;j<lenLL;j++) {

				System.out.println("Enter the data");
				int data=sc.nextInt();
				if(head==null) {

					head=new LinkedListNode<Integer>(data);
					tail=head;
				}

				else {
					tail.next=new LinkedListNode<Integer>(data);
					tail=tail.next;
				}	
			}

			arr[i]=head;

		}
		return arr;

	}

	public static void print(LinkedListNode<Integer>arr[]) {

		for(int i=0;i<arr.length;i++) {

			LinkedListNode<Integer>cur=arr[i];

			while(cur!=null) {
				System.out.print(cur.data+" ");
				cur=cur.next;
			}

			System.out.println();
		}

	}

	//using minimum heap

	public static LinkedListNode<Integer> merge(LinkedListNode<Integer>[]arr){

		PriorityQueue<Integer>heap=new PriorityQueue<>();
		
		//build minimum heap
		for(int i=0;i<arr.length;i++) {

			LinkedListNode<Integer>cur=arr[i];

			while(cur!=null) {
				
				heap.add(cur.data);
				cur=cur.next;
			}
		}
		
		//making merged linkedlist
		
		LinkedListNode<Integer>head=null;
		LinkedListNode<Integer>tail=null;
		
		while(!heap.isEmpty()) {
			
			int data=heap.poll();
			if(head==null) {
				head=new LinkedListNode<Integer>(data);
				tail=head;
			}
			else {
				tail.next=new LinkedListNode<Integer>(data);
				tail=tail.next;
			}	
		}
		
		return head;
	}






	public static void main(String[] args) {
		// TODO Auto-generated method stub

		LinkedListNode<Integer>head[] =takeInput();
		print(head);




	}

}
