package linkedlist;

import java.util.Scanner;

class LenghtTail{
	int length;
	LinkedListNode<Integer>head;

	LenghtTail(int length,LinkedListNode<Integer>head){
		this.length=length;
		this.head=head;
	}
}




public class AddTwoNumberInLL {

	public static LinkedListNode<Integer> takeInput(){
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the size of the LL");
		int size=sc.nextInt();
		LinkedListNode<Integer>head=null;
		LinkedListNode<Integer>tail=null;

		for(int i=0;i<size;i++) {
			System.out.println("Enter the data");
			int ele=sc.nextInt();
			if(head==null) {
				head=new LinkedListNode<Integer>(ele);
				tail=head;
			}
			else {
				LinkedListNode<Integer>newNode=new LinkedListNode<Integer>(ele);
				tail.next=newNode;
				tail=tail.next;
			}
		}

		return head;
	}
	
	public static LenghtTail len(LinkedListNode<Integer>head) {

		LinkedListNode<Integer>cur=head;
		LinkedListNode<Integer>tail=head;
		int count=0;
		while(cur!=null) {
			count++;
			//tail=cur;
			cur=cur.next;
		}

		LenghtTail f1=new LenghtTail(count, tail);

		return f1;




	}

	public static LinkedListNode<Integer> addNumber(LinkedListNode<Integer>first,LinkedListNode<Integer>second){

		LenghtTail f=len(first);	
		LenghtTail s=len(second);

		if(f.length>s.length) {

			int diff=f.length-s.length;

			for(int i=0;i<diff;i++) {

				LinkedListNode<Integer>newHead=new LinkedListNode<Integer>(0);
				
				newHead.next=s.head;
				s.head=newHead;
				
			}

		}
		else {

			int diff=s.length-f.length;

			for(int i=0;i<diff;i++) {

				LinkedListNode<Integer>newHead=new LinkedListNode<Integer>(0);

				newHead.next=f.head;
				f.head=newHead;
			}
		}



		LinkedListNode<Integer>cur1=reverse(first);
		LinkedListNode<Integer>cur2=reverse(second);
		LinkedListNode<Integer>newHead=null;
		LinkedListNode<Integer>newTail=null;

		int carry=0;


		while(cur1!=null && cur2!=null) {

			int rem=(cur1.data+cur2.data+carry)%10;
			carry=(cur1.data+cur2.data+carry)/10;

			if(newHead==null) {

				newHead=new LinkedListNode<Integer>(rem);

				newTail=newHead;


			}
			else {

				LinkedListNode<Integer>newNode=new LinkedListNode<Integer>(rem);
				newTail.next=newNode;
				newNode=newTail;

			}

			cur1=cur1.next;
			cur2=cur2.next;


		}

		if(carry!=0) {
			LinkedListNode<Integer>newNode=new LinkedListNode<Integer>(carry);
			newTail.next=newNode;
			newTail=newNode;
		}

		return reverse(newHead);

	}


	public static LinkedListNode<Integer> reverse(LinkedListNode<Integer>head){

		if(head.next==null|| head==null) {
			return head;
		}

		LinkedListNode<Integer>newHead=reverse(head.next);

		head.next=null;

		LinkedListNode<Integer>newTail=head;

		LinkedListNode<Integer>cur=newHead;

		while(cur.next!=null) {
			cur=cur.next;
		}

		cur.next=newTail;

		return newHead;


	}


	public static void print(LinkedListNode<Integer>head) {

		LinkedListNode<Integer>cur=head;
		while(cur!=null) {
			System.out.print(cur.data+" ");
			cur=cur.next;
		}

	}




	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		System.out.println("First LinkedList input");
		
		LinkedListNode<Integer>first=takeInput();
		
		System.out.println("Second linkedlist input");
		
		LinkedListNode<Integer>second=takeInput();
		
		print(addNumber(first,second));
		
		

	}

}
