package dynamic_programming;

public class Zero_one_KnapScak {

	public static int zero_one(int W,int wt[],int val[],int n) {
		System.out.println("only recursion");
		return zero_one(W,wt,val,n,0);
	}


	private static int zero_one(int w, int[] wt, int[] val, int n, int i) {
		if(w==0 || i==n) {
			return 0;
		}

		if(wt[i]>w) {
			//return zero_one(w, wt, val, n, i+1);
			return 0;
		}


		int op1=val[i]+zero_one(w-wt[i], wt, val, n,i+1);
		int op2=zero_one(w, wt, val, n,i+1);

		return (int)Math.max(op1, op2);

	}

	public static int zero_oneDP(int w,int wt[],int val[],int n ) {
		System.out.println("using DP");
		int storage[][]=new int[n+1][w+1];

		for(int i=0;i<=w;i++) {
			storage[0][i]=0;
		}

		for(int i=0;i<=n;i++) {
			storage[i][0]=0;
		}

		for(int i=1;i<=n;i++) {
			for(int j=1;j<=w;j++) {
				if(j<wt[i-1]) {
					storage[i][j]=storage[i-1][j];
				}
				else {
					int op1=val[i-1]+storage[i-1][j-wt[i-1]];
					int op2=storage[i-1][j];
					storage[i][j]=(int)Math.max(op1, op2);
					
				}
			}
		}
		
		return storage[n][w];







	}


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int wt[]= {4,5,6};
		int val[]= {1,2,3};
		int w=3;
		int n=wt.length;
		System.out.println(zero_oneDP(w,wt,val,n));
		System.out.println(zero_one(w,wt,val,n));

	}

}
